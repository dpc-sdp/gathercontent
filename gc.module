<?php
/**
 * @file
 * Main module file for GatherContent module.
 */

include_once "includes/Content.inc";

use GatherContent\Content;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gc_form_gc_import_form_select_alter(&$form) {
  $form['#attributes']['class'][] = 'form-select-import';
}

/**
 * Implements hook_permission().
 */
function gc_permission() {
  return array(
    'administer gathercontent' => array(
      'title' => t('Administer GatherContent'),
      'description' => t('Access all GatherContent pages'),
    ),
    'administer mapping' => array(
      'title' => t('Administer GatherContent mapping'),
      'description' => t('Access all GatherContent mapping pages'),
    ),
    'create mapping' => array(
      'title' => t('Create GatherContent mapping'),
      'description' => t('Create GatherContent mapping'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function gc_menu() {
  $items = array();
  $items['admin/config/gc'] = array(
    'title' => 'GatherContent',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer gathercontent'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/gc/config'] = array(
    'title' => 'Authentication',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gc_authentication_form'),
    'access arguments' => array('administer gathercontent'),
    'file' => 'gc.authentication.inc',
  );
  $items['admin/config/gc/config/config'] = array(
    'title' => 'Authentication',
    'access arguments' => array('administer gathercontent'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/gc/config/test'] = array(
    'title' => 'Test connection',
    'page callback' => 'gc_authentication_test_page',
    'access arguments' => array('administer gathercontent'),
    'file' => 'gc.authentication.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/gc/mapping/create'] = array(
    'title' => 'Create Mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gc_mapping_form_templates'),
    'access arguments' => array(
      'administer gathercontent',
    ),
    'file' => 'gc.mapping.inc',
  );
  $items['admin/config/gc/import'] = array(
    'title' => 'Import Content',
    'page callback' => 'gc_import_form',
    'access arguments' => array(
      'administer gathercontent',
    ),
    'file' => 'gc.import.inc',
  );
  $items['admin/config/gc/mapping/%/delete'] = array(
    'title' => 'Delete GatherContent Mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gc_mapping_delete_form', 4),
    'access arguments' => array(
      'administer gathercontent',
    ),
    'type' => MENU_CALLBACK,
    'file' => 'gc.mapping.inc',
  );
  $items['admin/config/gc/mapping/%/edit'] = array(
    'title' => 'Edit GatherContent Mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gc_mapping_edit_form', 4),
    'access arguments' => array(
      'administer gathercontent',
    ),
    'type' => MENU_CALLBACK,
    'file' => 'gc.mapping.inc',
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function gc_entity_info() {
  $info = array();

  $info['gc_mapping'] = array(
    'label' => t('Mapping'),
    'base table' => 'gc_mapping',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'content_type',
    ),
    'module' => 'gc',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'fieldable' => FALSE,
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function gc_entity_property_info() {
  $info = array();

  $info['gc_mapping']['properties']['id'] = array(
    'label' => t('Mapping ID'),
    'description' => t('The ID of the mapping.'),
    'type' => 'integer',
    'schema field' => 'id',
  );
  $info['gc_mapping']['properties']['gc_project_id'] = array(
    'label' => t('GC Project ID'),
    'description' => t('The ID of the project in GatherContent.'),
    'type' => 'integer',
    'schema field' => 'gc_project_id',
  );
  $info['gc_mapping']['properties']['gc_project'] = array(
    'label' => t('GC Project'),
    'description' => t('Project name in GatherContent.'),
    'type' => 'text',
    'schema field' => 'gc_project',
  );
  $info['gc_mapping']['properties']['gc_template_id'] = array(
    'label' => t('GC Template ID'),
    'description' => t('The ID of template in GatherContent.'),
    'type' => 'integer',
    'schema field' => 'gc_template_id',
  );
  $info['gc_mapping']['properties']['gc_template'] = array(
    'label' => t('GC Template'),
    'description' => t('Name of template in GatherContent.'),
    'type' => 'text',
    'schema field' => 'gc_template',
  );
  $info['gc_mapping']['properties']['content_type'] = array(
    'label' => t('Content type machine name'),
    'description' => t('Content type machine name.'),
    'type' => 'token',
    'schema field' => 'content_type',
  );
  $info['gc_mapping']['properties']['content_type_name'] = array(
    'label' => t('Content type name'),
    'description' => t('Content type human-readable name.'),
    'type' => 'text',
    'computed' => TRUE,
    'getter callback' => 'entity_property_verbatim_set',
    'options list' => 'node_type_get_names',
    'schema field' => 'content_type',
  );
  $info['gc_mapping']['properties']['created'] = array(
    'label' => t('Created'),
    'description' => t('Timestamp of mapping creation'),
    'type' => 'date',
    'getter callback' => 'entity_property_verbatim_set',
    'schema field' => 'created',
  );
  $info['gc_mapping']['properties']['updated_drupal'] = array(
    'label' => t('Updated (Drupal)'),
    'description' => t('Timestamp of mapping update in Drupal'),
    'type' => 'date',
    'schema field' => 'updated_drupal',
  );
  $info['gc_mapping']['properties']['updated_gc'] = array(
    'label' => t('Updated (GC)'),
    'description' => t('Timestamp of mapping update in GatherContent'),
    'type' => 'date',
    'schema field' => 'updated_gc',
  );
  $info['node']['properties']['gc_mapping_id'] = array(
    'label' => t("GC Mapping ID"),
    'type' => 'integer',
    'description' => t("The ID of created GatherContent mapping"),
  );
  $info['node']['properties']['gc_id'] = array(
    'label' => t("GC ID"),
    'type' => 'integer',
    'description' => t("The ID of content in GatherContent"),
  );
  $info['file']['properties']['gc_id'] = array(
    'label' => t("GC ID"),
    'type' => 'integer',
    'description' => t("The ID of file in GatherContent"),
  );

  return $info;
}

/**
 * Implements hook_views_api().
 */
function gc_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'gc') . '/views',
  );
}

/**
 * Implements hook_action_info().
 *
 * @inheritdoc
 */
function gc_action_info() {
  return array(
    'gc_update' => array(
      'type' => 'entity',
      'label' => t('Update from GatherContent'),
      'configurable' => FALSE,
      'triggers' => array('any'),
      'behavior' => array('create_property'),
      'vbo_configurable' => FALSE,
      'pass rows' => TRUE,
    ),
  );
}

/**
 * Callback for `gc_update` action.
 *
 * Update content from GatherContent.
 *
 * @param object $entity
 *   Entity, we want to update.
 * @param array $context
 *   Context of action.
 *
 * @see gc_action_info
 */
function gc_update(&$entity, $context = array()) {
  _gc_fetcher($entity->gc_id, $entity);
}

/**
 * Helper function for fetching data from GatherContent.
 *
 * @param int $gc_id
 *   ID of GatherContent piece of content.
 * @param object|null $entity
 *   Object of entity, if we are updating exiting content.
 */
function _gc_fetcher($gc_id, $entity = NULL) {
  global $user;
  $content_obj = new Content();
  $content = $content_obj->getContent($gc_id);

  $query = new EntityFieldQuery();
  if (is_null($entity)) {
    $result = $query->entityCondition('entity_type', 'gc_mapping')
      ->propertyCondition('gc_project_id', $content->project_id)
      ->propertyCondition('gc_template_id', $content->template_id)
      ->execute();
  }
  else {
    $result = $query->entityCondition('entity_type', 'gc_mapping')
      ->propertyCondition('id', $entity->gc_mapping_id)
      ->execute();
  }

  if (isset($result['gc_mapping'])) {
    $mapping_ids = array_keys($result['gc_mapping']);
    $entities = entity_load('gc_mapping', $mapping_ids);
    $mapping = reset($entities);

    $mapping_data = unserialize($mapping->data);

    if (is_null($entity)) {
      $entity = entity_create('node', array(
        'type' => $mapping->content_type,
        'gc_mapping_id' => $mapping->id,
        'gc_id' => $content->id,
        'uid' => $user->uid,
      ));
    }

    if ($entity !== FALSE) {
      $node = entity_metadata_wrapper('node', $entity);

      $files = $content_obj->getFiles($gc_id);
      foreach ($content->config as $pane) {
        foreach ($pane->elements as $field) {
          if (isset($mapping_data[$field->name]) && !empty($mapping_data[$field->name])) {
            switch ($field->type) {
              case 'files':
                foreach ($files as $file) {
                  if ($file->field === $field->name) {
                    $node->{$mapping_data[$field->name]}->info();
                    $found = FALSE;
                    foreach ($node->{$mapping_data[$field->name]}->value() as $file) {
                      if ($file['gc_id'] === $file->id) {
                        $found = TRUE;
                      }
                    }

                    if (!$found) {
                      $local_file = file_save_data(file_get_contents($file->url), 'public://' . $file->filename);
                      $local_file->gc_id = $file->id;
                      file_save($local_file);
                      $node->{$mapping_data[$field->name]}[] = array('fid' => $local_file->fid);
                    }
                  }
                }
                break;

              case 'choice_radio':
                foreach ($field->options as $option) {
                  if ($option->selected) {
                    if (isset($option->value)) {
                      $node->{$mapping_data[$field->name]}->set($option->value);
                    }
                    else {
                      $node->{$mapping_data[$field->name]}->set($option->name);
                    }
                  }
                }
                break;

              case 'choice_checkbox':
                foreach ($node->{$mapping_data[$field->name]}->getIterator() as $delta => $item) {
                  $node->{$mapping_data[$field->name]}->set(array(NULL));
                }
                $node->save(TRUE);
                foreach ($field->options as $option) {
                  if ($option->selected) {
                    $node->{$mapping_data[$field->name]}[] = $option->name;
                  }
                }
                break;

              case 'section':
                $node->{$mapping_data[$field->name]}->set(array(
                  'value' => '<h3>' . $field->title . '</h3>' . $field->subtitle,
                  'format' => 'filtered_html',
                ));
                break;

              default:
                if ($mapping_data[$field->name] === 'title') {
                  $node->title->set($field->value);
                }
                else {
                  $node->{$mapping_data[$field->name]}->set(array(
                    'value' => $field->value,
                    'format' => ($field->plain_text ? 'plain_text' : 'filtered_html'),
                  ));
                }
                break;
            }
          }
        }
      }
      $node->save(TRUE);
    }
    else {
      exit(0);
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function gc_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path === 'admin/config/gc/mapping') {
    $data['actions']['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => t('Add new mapping'),
        'href' => 'admin/config/gc/mapping/create',
        'localized_options' => array(
          'attributes' => array(
            'title' => t('Add new mapping'),
          ),
        ),
      ),
    );
  }
}

<?php

/**
 * @file
 * GatherContent UI.
 */

use Drupal\gathercontent\Entity\OperationItem;
use Drupal\gathercontent\Event\GatherContentEvents;
use Drupal\gathercontent\Event\PostUploadEvent;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_entity_type_alter().
 */
function gathercontent_ui_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['gathercontent_mapping'])) {
    $entity_types['gathercontent_mapping']->setListBuilderClass('Drupal\gathercontent_ui\MappingListBuilder');

    $entity_types['gathercontent_mapping']->setFormClass('default', 'Drupal\gathercontent_ui\Form\MappingImportForm');
    $entity_types['gathercontent_mapping']->setFormClass('add', 'Drupal\gathercontent_ui\Form\MappingImportForm');
    $entity_types['gathercontent_mapping']->setFormClass('edit', 'Drupal\gathercontent_ui\Form\MappingEditForm');
    $entity_types['gathercontent_mapping']->setFormClass('delete', 'Drupal\gathercontent_ui\Form\MappingDeleteForm');

    $entity_types['gathercontent_mapping']->setHandlerClass('route_provider', [
      'html' => 'Drupal\gathercontent_ui\MappingHtmlRouteProvider',
    ]);

    $entity_types['gathercontent_mapping']->set('admin_permission', 'administer site configuration');

    $entity_types['gathercontent_mapping']->setLinkTemplate('canonical', '/admin/config/gathercontent/mapping/{gathercontent_mapping}');
    $entity_types['gathercontent_mapping']->setLinkTemplate('add-form', '/admin/config/gathercontent/mapping/create');
    $entity_types['gathercontent_mapping']->setLinkTemplate('edit-form', '/admin/config/gathercontent/mapping/{gathercontent_mapping}/edit');
    $entity_types['gathercontent_mapping']->setLinkTemplate('delete-form', '/admin/config/gathercontent/mapping/{gathercontent_mapping}/delete');
    $entity_types['gathercontent_mapping']->setLinkTemplate('collection', '/admin/config/gathercontent/mapping');
  }

  if (isset($entity_types['gathercontent_operation_item'])) {
    $entity_types['gathercontent_operation_item']->setHandlerClass('views_data', 'Drupal\gathercontent_ui\Entity\OperationItemViewsData');
  }

  if (isset($entity_types['gathercontent_operation'])) {
    $entity_types['gathercontent_operation']->setHandlerClass('views_data', 'Drupal\gathercontent_ui\Entity\OperationViewsData');
  }
}

/**
 * Finished callback.
 *
 * @inheritdoc
 */
function gathercontent_upload_finished($success, $results, $operations) {
  if ($success) {
    // Select all items with uuid.
    $result = \Drupal::entityQuery('gathercontent_operation_item')
      ->condition('operation_uuid', $results['uuid'])
      ->execute();
    if (!empty($result)) {
      $operation_items = OperationItem::loadMultiple($result);
      $success_counter = 0;
      $nids = ['success' => [], 'failed' => []];
      foreach ($operation_items as $operation_item) {
        /** @var \Drupal\gathercontent\Entity\OperationItem $operation_item */
        if ($operation_item->getStatus() === 'Success') {
          $success_counter++;
          $nids['success'][] = [
            'nid' => $operation_item->get('nid')->value,
            'gc_id' => $operation_item->get('gc_id')->value,
          ];
        }
        else {
          $nids['failed'][] = [
            'nid' => $operation_item->get('nid')->value,
            'gc_id' => $operation_item->get('gc_id')->value,
          ];
        }
      }
      $unsuccessful = count($result) - $success_counter;
      drupal_set_message(\Drupal::translation()
        ->formatPlural($success_counter, '1 item was uploaded successfully.', '@count items were uploaded successfully.'));
      if ($unsuccessful > 0) {
        drupal_set_message(\Drupal::translation()
          ->formatPlural($unsuccessful, '1 item was not uploaded. Check errors below.', '@count items were not uploaded. Check errors below.'), 'error');
      }
      \Drupal::service('event_dispatcher')
        ->dispatch(GatherContentEvents::POST_UPLOAD, new PostUploadEvent($nids['success'], $nids['failed'], $results['uuid']));
    }
    return new RedirectResponse('admin/config/gathercontent/upload/result/' . $results['uuid']);
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      ),
      'error'
    );
  }
  return TRUE;
}

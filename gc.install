<?php

/**
 * @file
 * Install and uninstall script for GatherContent module.
 */

require_once 'includes/Account.inc';
require_once 'includes/Template.inc';

/**
 * Implements hook_install().
 */
function gc_install() {
  db_add_field(
    'node',
    'gc_mapping_id',
    array(
      'definition' => 'The ID of GatherContent mapping.',
      'type' => 'int',
      'unsigned' => TRUE,
    )
  );
  db_add_field(
    'node',
    'gc_id',
    array(
      'definition' => 'The ID of content in GatherContent.',
      'type' => 'int',
      'unsigned' => TRUE,
    )
  );
  db_add_field(
    'node',
    'gc_import_status',
    array(
      'definition' => 'The ID of content in GatherContent.',
      'type' => 'text',
    )
  );
  db_add_field(
    'file_managed',
    'gc_id',
    array(
      'definition' => 'The ID of file in GatherContent.',
      'type' => 'int',
      'unsigned' => TRUE,
    )
  );
}

/**
 * Implements hook_uninstall().
 */
function gc_uninstall() {
  variable_del('gc_username');
  variable_del('gc_api_key');
  variable_del('gc_account');

  db_drop_field('node', 'gc_mapping_id');
  db_drop_field('node', 'gc_id');
  db_drop_field('node', 'gc_import_status');
  db_drop_field('file_managed', 'gc_id');
}

/**
 * Implements schema for our custom entity.
 *
 * @inheritdoc
 */
function gc_schema() {
  $schema = array();

  $schema['gc_mapping'] = array(
    'description' => 'The base table for the Mapping entity',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'gc_project_id' => array(
        'type' => 'int',
        'length' => 11,
        'not null' => TRUE,
      ),
      'gc_project' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'gc_template_id' => array(
        'type' => 'int',
        'length' => 11,
        'not null' => TRUE,
      ),
      'gc_template' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'content_type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'updated_drupal' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
      'template' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['gc_operation'] = array(
    'description' => 'The base table for the GC Operation entity',
    'fields' => array(
      'uuid' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('uuid'),
  );

  $schema['gc_operation_item'] = array(
    'description' => 'The base table for the GC Operation Item entity',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'operation_uuid' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'item_status' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'item_status_color' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'item_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'template_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'gc_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_schema_alter().
 *
 * Adding extra properties to node and file_managed.
 *
 * @inheritdoc
 */
function gc_schema_alter(&$schema) {
  $schema['node']['fields']['gc_mapping_id'] = array(
    'definition' => 'The ID of GatherContent mapping.',
    'type' => 'int',
    'unsigned' => TRUE,
  );
  $schema['node']['fields']['gc_id'] = array(
    'definition' => 'The ID of content in GatherContent.',
    'type' => 'int',
    'unsigned' => TRUE,
  );
  $schema['node']['fields']['gc_import_status'] = array(
    'definition' => 'The ID of content in GatherContent.',
    'type' => 'text',
  );
  $schema['file_managed']['fields']['gc_id'] = array(
    'definition' => 'The ID of file in GatherContent.',
    'type' => 'int',
    'unsigned' => TRUE,
  );

  if (isset($schema['gc_mapping']['fields']['updated_gc'])) {
    unset($schema['gc_mapping']['fields']['updated_gc']);
  }
}

/**
 * Change `content_type` and `data` fields from `gc_mapping` table.
 */
function gc_update_7301() {
  db_change_field('gc_mapping', 'content_type', 'content_type', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'default' => '',
  ));
  db_change_field('gc_mapping', 'data', 'data', array(
    'type' => 'blob',
    'not null' => FALSE,
    'size' => 'big',
    'serialize' => TRUE,
  ));
}

/**
 * Add field `gc_import_status` to `node` table.
 */
function gc_update_7302() {
  db_add_field('node', 'gc_import_status', array(
    'definition' => 'The ID of content in GatherContent.',
    'type' => 'text',
  ));
}

/**
 * Set `gc_urlkey` variable.
 */
function gc_update_7303() {
  // Load all accounts.
  $acc_obj = new GatherContent\Account();
  $accounts = $acc_obj->getAccounts();
  // Load local account and extract account id.
  $local_account = variable_get('gc_account');
  reset($local_account);
  $local_account_id = key($local_account);
  // Find urlkey for local account id and store it in variable.
  foreach ($accounts as $account) {
    if ($local_account_id === $account->id) {
      variable_set('gc_urlkey', $account->slug);
      break;
    }
  }
}

/**
 * Remove `updated_gc` field from DB.
 */
function gc_update_7304() {
  db_drop_field('gc_mapping', 'updated_gc');
}

/**
 * Add field `template` to `gc_mapping` table.
 */
function gc_update_7305() {
  db_add_field('gc_mapping', 'template', array(
    'type' => 'blob',
    'not null' => FALSE,
    'size' => 'big',
    'serialize' => TRUE,
  ));
}

/**
 * Set templates to existing mappings.
 */
function gc_update_7306() {
  $mappings = entity_load('gc_mapping');
  $tmp = new GatherContent\Template();
  foreach ($mappings as $mapping) {
    if (empty($mapping->template)) {
      $template = $tmp->getTemplate($mapping->gc_template_id);
      $mapping->template = serialize($template);
      $mapping->save();
    }
  }
}

/**
 * Create tables for gc_operation and gc_operation_item entities.
 */
function gc_update_7307() {
  db_create_table('gc_operation', drupal_get_schema_unprocessed('gc', 'gc_operation'));
  db_create_table('gc_operation_item', drupal_get_schema_unprocessed('gc', 'gc_operation_item'));
}

/**
 * Implements hook_requirements().
 */
function gc_requirements($phase) {
  if ($phase !== 'runtime') {
    return array();
  }

  $t = get_t();
  $requirements = array(
    'gc_tablesorter' => array(
      'title' => $t('GatherContent: Tablesorter plugin'),
      'value' => $t('Unavailable.'),
      'description' => $t('Install <a href="@libraries-page">Libraries</a> module.', array(
        '@libraries-page' => 'https://www.drupal.org/project/libraries',
      )),
      'severity' => REQUIREMENT_INFO,
    ),
  );

  if (module_exists('libraries')) {
    $tablesorter_lib_info = libraries_detect('tablesorter-mottie');

    if ($tablesorter_lib_info['installed'] && $tablesorter_lib_info['version']) {
      $requirements['gc_tablesorter']['value'] = $tablesorter_lib_info['version'];
      $requirements['gc_tablesorter']['severity'] = REQUIREMENT_OK;
      unset($requirements['gc_tablesorter']['description']);
    }
    else {
      $requirements['gc_tablesorter']['description'] = $t('Download <a href="@tablesorter-github">Mottie\'s tablesorter plugin</a> to <code>sites/all/libraries</code> toget sortable table headers at GatherContent admin UI. Rename it\'s folder to <code>tablesorter-mottie</code>.',
        array(
          '@tablesorter-github' => 'https://github.com/Mottie/tablesorter/archive/v2.25.8.zip',
        ));
    }
  }

  return $requirements;
}

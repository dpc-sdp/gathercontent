<?php

/**
 * @file
 * Main module file for GatherContent Upload module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\Language;
use Drupal\field\Entity\FieldConfig;
use Drupal\gathercontent\Entity\Mapping;
use Drupal\gathercontent_upload\Event\GatherUploadContentEvents;
use Drupal\gathercontent_upload\Event\PostNodeUploadEvent;
use Drupal\gathercontent_upload\Event\PreNodeUploadEvent;
use Drupal\node\NodeInterface;

/**
 * Upload batch operation callback.
 *
 * @param \Drupal\node\NodeInterface $entity
 *   Object of entity we want to upload.
 * @param string $uuid
 *   UUID of \Drupal\gathercontent\Entity\Operation entity.
 * @param array $context
 *   Context of operation.
 */
function gathercontent_upload_process(NodeInterface $entity, $uuid, &$context) {
  // 1. Load template from remote
  // 2. Compare local and remote template
  // 3. If templates are same, load node from remote.
  // 4. Set values based on mapping.
  /** @var \Drupal\gathercontent\DrupalGatherContentClient $client */
  $client = \Drupal::service('gathercontent.client');
  $mapping = Mapping::load($entity->get('gc_mapping_id')->getValue()[0]['value']);

  /** @var \Cheppers\GatherContent\DataTypes\Template $remote_template */
  $remote_template = $client->templateGet($mapping->getGathercontentTemplateId());
  $remote_template_config = $client->getBody(TRUE)->data->config;

  $remote_node = $client->itemGet($entity->get('gc_id')->getValue()[0]['value']);
  $config = $remote_node->config;
  $mapping_data = unserialize($mapping->getData());

  $operation_item = \Drupal::entityTypeManager()
    ->getStorage('gathercontent_operation_item')
    ->create([
      'operation_uuid' => $uuid,
      'item_status' => $remote_node->status->name,
      'item_status_color' => $remote_node->status->color,
      'template_name' => $remote_template->name,
      'item_name' => $remote_node->name,
      'gc_id' => $entity->get('gc_id'),
      'nid' => $entity->id(),
    ]);

  $local_template_config = unserialize($mapping->getTemplate())->data->config;
  if ($remote_template_config == $local_template_config) {
    try {
      foreach ($config as &$pane) {
        $is_translatable = \Drupal::moduleHandler()->moduleExists('content_translation')
          && \Drupal::service('content_translation.manager')
            ->isEnabled('node', $mapping->getContentType())
          && isset($mapping_data[$pane->id]['language'])
          && ($mapping_data[$pane->id]['language'] != Language::LANGCODE_NOT_SPECIFIED);
        if ($is_translatable) {
          $language = $mapping_data[$pane->id]['language'];
        }
        else {
          $language = Language::LANGCODE_NOT_SPECIFIED;
        }

        $exported_fields = [];
        foreach ($pane->elements as &$field) {
          if (isset($mapping_data[$pane->id]['elements'][$field->id])
            && !empty($mapping_data[$pane->id]['elements'][$field->id])
          ) {
            $local_field_id = $mapping_data[$pane->id]['elements'][$field->id];
            if ((isset($mapping_data[$pane->id]['type']) && $mapping_data[$pane->id]['type'] === 'content') || !isset($mapping_data[$pane->id]['type'])) {
              $local_id_array = explode('||', $local_field_id);
              $id_count = count($local_id_array);
              $entityTypeManager = \Drupal::entityTypeManager();

              $current_entity = $entity;
              $current_field_name = FieldConfig::load($local_id_array[0])->getName();

              for ($i = 0; $i < $id_count - 1; $i++) {
                $local_id = $local_id_array[$i];
                $field_info = FieldConfig::load($local_id);
                $current_field_name = $field_info->getName();
                $target_field_value = $current_entity->get($current_field_name)->getValue();

                if (!empty($target_field_value)) {
                  $field_target_info = FieldConfig::load($local_id_array[$i + 1]);
                  $entityStorage = $entityTypeManager
                    ->getStorage($field_target_info->getTargetEntityTypeId());
                  $current_field_name = $field_target_info->getName();

                  foreach ($target_field_value as $target) {
                    $export_key = $target['target_id'] . '_' . $current_field_name;

                    if (!empty($exported_fields[$export_key])) {
                      continue;
                    }

                    $child_entity = $entityStorage->loadByProperties([
                      'id' => $target['target_id'],
                      'type' => $field_target_info->getTargetBundle(),
                    ]);

                    if (!empty($child_entity[$target['target_id']])) {
                      $current_entity = $child_entity[$target['target_id']];
                      $exported_fields[$export_key] = TRUE;
                      break;
                    }
                  }
                }
              }

              gc_gc_process_set_fields($field, $current_entity, $is_translatable, $language, $current_field_name);
            }
            elseif ($mapping_data[$pane->id]['type'] === 'metatag') {
              if (\Drupal::moduleHandler()->moduleExists('metatag') && check_metatag($entity->getType())) {
                $metatag_fields = get_metatag_fields($entity->getType());
                foreach ($metatag_fields as $metatag_field) {
                  if ($is_translatable) {
                    $field->value = $entity->getTranslation($language)->{$metatag_field}->value();
                  }
                  else {
                    $field->value = $entity->{$metatag_field}->value();
                  }
                }

              }
            }
          }
          else {
            $operation_item->status = "System error, please contact you administrator.";
            $operation_item->save();
          }
        }
      }
      $event = \Drupal::service('event_dispatcher')
        ->dispatch(GatherUploadContentEvents::PRE_NODE_UPLOAD, new PreNodeUploadEvent($entity, $config));
      /** @var \Drupal\gathercontent_upload\Event\PreNodeUploadEvent $event */
      $config = $event->getGathercontentValues();
      try {
        $client->itemSavePost($entity->get('gc_id')->getValue()[0]['value'], $config);
        $operation_item->status = "Success";
        $operation_item->save();
        \Drupal::service('event_dispatcher')
          ->dispatch(GatherUploadContentEvents::POST_NODE_UPLOAD, new PostNodeUploadEvent($entity, $config));
      }
      catch (\Exception $e) {
        $operation_item->status = $e->getMessage();
        $operation_item->save();
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('gc_upload')->error(print_r($e, TRUE), []);
      $operation_item->status = 'Mapping doesn\'t match';
      $operation_item->save();
    }
  }
  else {
    $operation_item->status = 'Mapping doesn\'t match';
    $operation_item->save();
  }

  $context['results']['uuid'] = $uuid;
}

/**
 * @param $field
 *   Field object.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity object.
 * @param bool $is_translatable
 *   Translatable bool.
 * @param string $language
 *   Language string.
 * @param string $local_field_name
 *   Field Name.
 */
function gc_gc_process_set_fields(&$field, EntityInterface $entity, $is_translatable, $language, $local_field_name) {
  switch ($field->type) {
    case 'files':
      // There is currently no API for manipulating with files.
      break;

    case 'choice_radio':
      /** @var \Cheppers\GatherContent\DataTypes\ElementRadio $field */

      $option_names = [];

      foreach ($field->options as &$option) {
        // Set selected to false for each option.
        $option['selected'] = FALSE;
        $option_names[] = $option['name'];
      }

      // Fetch local selected option.
      if ($is_translatable) {
        $selected = $entity->getTranslation($language)->{$local_field_name}->value;
      }
      else {
        $selected = $entity->{$local_field_name}->value;
      }

      if (!in_array($selected, $option_names)) {
        // If it's other, then find that option in remote.
        foreach ($field->options as &$option) {
          if (isset($option['value'])) {
            $option['selected'] = TRUE;
            $option['value'] = $selected;
          }
        }
      }
      else {
        // If it's checkbox, find it by remote option name,
        // which should be same.
        foreach ($field->options as &$option) {
          if ($option['name'] == $selected) {
            $option['selected'] = TRUE;
          }
        }
      }
      break;

    case 'choice_checkbox':
      /** @var \Cheppers\GatherContent\DataTypes\ElementCheckbox $field */

      foreach ($field->options as &$option) {
        // Set selected to false for each option.
        $option['selected'] = FALSE;
      }

      // Fetch local selected option.
      if ($is_translatable) {
        $selected = $entity->getTranslation($language)->{$local_field_name}->value;
      }
      else {
        $selected = $entity->{$local_field_name}->value;
      }

      // If it's checkbox, find it by remote option name,
      // which should be same.
      foreach ($field->options as &$option) {
        if (isset($selected[$option['name']])) {
          $option['selected'] = TRUE;
        }
      }
      break;

    case 'section':
      // We don't upload this because this field shouldn't be
      // edited.
      break;

    default:
      if ($local_field_name === 'title') {
        if ($is_translatable) {
          $field->value = $entity->getTranslation($language)
            ->getTitle();
        }
        else {
          $field->value = $entity->getTitle();
        }
      }
      else {
        if ($is_translatable) {
          $field->value = $entity->getTranslation($language)->{$local_field_name}->value;
        }
        else {
          $field->value = $entity->{$local_field_name}->value;
        }
      }
      break;
  }
}

<?php
/**
 * @file
 * Imports pages from GatherContent (http://gathercontent.com/) into Drupal as 
 * nodes.
 *
 * @TODO code efficiency can probably be improved quite a bit 
 * (for example, batch operation for node creation, OOP vs procedural, ...).
 * 
 * @TODO form elements in tableselect form: is this possible/usable at all? 
 * Ie. is there a way to use the form data?
 * 
 * @TODO Move GatherContent API functions to its own file (for example, 
 * gathercontent_api.inc).
 * 
 * @TODO etc etc etc ... See issue queue. Patches welcome!
 */

/**
 * Implements hook_help().
 */
function gathercontent_help($path, $arg) {
  // @TODO help.
}

/**
 * Implements hook_menu().
 */
function gathercontent_menu() {
  $items = array(
    'admin/config/content/gathercontent' => array(
      'title' => 'GatherContent',
      'description' => 'Import pages from GatherContent.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer gathercontent'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    ),
    'admin/config/content/gathercontent/settings' => array(
      'title' => 'Settings',
      'description' => 'Administer GatherContent settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('gathercontent_api_admin'),
      'access arguments' => array('administer gathercontent'),
      'file' => 'gathercontent_admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/config/content/gathercontent/%ctools_js/import' => array(
      'title' => 'Import pages',
      'description' => 'Use the wizard to import pages from GatherContent.',
      'page callback' => 'gathercontent_import',
      'page arguments' => array(4),
      'access callback' => TRUE,
      'access arguments' => array('administer gathercontent'),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
  return $items;
}

/**
 * Fixes weird menu_translate error.
 */
function ctools_js_to_arg() {
  return 'nojs';
}

/**
 * Implements hook_permission().
 */
function gathercontent_permission() {
  return array(
    'administer gathercontent' => array(
      'title' => t('Administer GatherContent'),
      'description' => t('Change settings and import pages from GatherContent'),
    ),
  );
}

/**
 * Import wizard, built with CTools multistep form wizard.
 */
function gathercontent_import($js = NULL, $step = NULL) {
  if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
  }
  // Define array for ctools multistep wizard.
  $form_info = array(
    'id' => 'gathercontent-import-form',
    'path' => "admin/config/content/gathercontent/" . ($js ? 'ajax' : 'nojs') . "/import/%step",
    'show trail' => FALSE,
    'show back' => TRUE,
    'show cancel' => FALSE,
    'show return' => FALSE,
    'finish text' => 'Import pages',
    'next callback' => 'gathercontent_import_next',
    'finish callback' => 'gathercontent_import_finish',
    'cancel callback' => 'gathercontent_import_cancel',

    // Define forms order.
    'order' => array(
      'page_type' => t('Select page type'),
      'pages' => t('Import pages'),
    ),

    // Define forms.
    'forms' => array(
      'page_type' => array(
        'form id' => 'gathercontent_import_page_type',
      ),
      'pages' => array(
        'form id' => 'gathercontent_import_pages',
      ),
    ),
  );

  $object_id = 'gathercontent_import';

  if (empty($step)) {
    // Reset the form when $step is NULL.
    gathercontent_import_cache_clear($object_id);
    $step = 'page_type';
  }

  // This automatically gets defaults if nothing was saved.
  $object = gathercontent_import_cache_get($object_id);
  // dsm($object);
  // Live $form_state changes.
  $form_state = array(
    'ajax' => $js,
    'object_id' => $object_id,
    'object' => &$object,
  );

  // Send this all off to our form. This is like drupal_get_form only wizardy.
  ctools_include('wizard');
  $form = ctools_wizard_multistep_form($form_info, $step, $form_state);

  $output = drupal_render($form);

  return $output;
}

/**
 * Clears CTools' multistep form cache.
 */
function gathercontent_import_cache_clear($name) {
  ctools_include('object-cache');
  ctools_object_cache_clear('gathercontent_import', $name);
}

/**
 * Stores CTools' multistep form cache so we can retain data from form to form.
 *
 * @param $id
 *   cache id.
 * @param object $object
 *   object with form values.
 */
function gathercontent_import_cache_set($name, $object) {
  ctools_include('object-cache');
  ctools_object_cache_set('gathercontent_import', $name, $object);
}

/**
 * Gets the current object from the cache, or default.
 *
 * @param $id
 *   cache id.
 *
 * @return object
 *   cache with stored stuff.
 */
function gathercontent_import_cache_get($name) {
  ctools_include('object-cache');
  return ctools_object_cache_get('gathercontent_import', $name);
}

/**
 * Handles the 'next' click on the add/edit pane form wizard.
 *
 * All we need to do is store the updated pane in the cache.
 */
function gathercontent_import_next(&$form_state) {
  $form_state['object'] = $form_state['values'];
  gathercontent_import_cache_set($form_state['object_id'], $form_state['object']);
}

/**
 * Handles the 'finish' click on teh add/edit pane form wizard.
 *
 * All we need to do is set a flag so the return can handle adding
 * the pane.
 */
function gathercontent_import_finish(&$form_state) {
  $form_state['complete'] = TRUE;
}

/**
 * Handles the 'cancel' click on the add/edit pane form wizard.
 */
function gathercontent_import_cancel(&$form_state) {
  $form_state['cancel'] = TRUE;
}

/**
 * Import wizard step 1: Select page type.
 */
function gathercontent_import_page_type($form, &$form_state) {
  $page_type = variable_get('gathercontent_page_type');
  $form['gathercontent_page_type'] = array(
    '#title' => t("Select page type - NOTE: currently only 'All pages' works."),
    '#type' => 'radios',
    '#default_value' => ($page_type == '' ? 'all' : $page_type),
    '#options' => array('all' => t('All pages'), 'approved' => t('Approved pages only')),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Form submit handler.
 */
function gathercontent_import_page_type_submit($form, &$form_state) {
  variable_set('gathercontent_page_type', $form_state['values']['gathercontent_page_type']);
}

/**
 * Import wizard step 2: Import pages.
 */
function gathercontent_import_pages($form, &$form_state) {
  $page_type = $form_state['object']['gathercontent_page_type'];
  $class = new GatherContentPages();
  $pages = $class->getPages($page_type);

  // Build table header.
  $header = array(
    'title' => t('Page title'),
    // @TODO: Major todo: figure out if there's way to use form elements in a
    // tableselect form. It's possible to display them, but seems impossible to
    // actually use the form data.
    // 'page_name' => t('Page title'),
    // 'overwrite_id' => t('Overwrite?'),
    // 'main_content' => t('Fields'),
  );

  $options = $class->pageImportForm($pages);
  $form['pages_list'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No pages found.'),
  );

  return $form;
}

function gathercontent_import_pages_submit($form, &$form_state) {
  $class = new GatherContentPages();
  // Get rid of unchecked rows.
  $page_ids = array_filter($form_state['values']['pages_list']);
  $class->createNodes($page_ids);
}

/**
 * Connecting to the GatherContent API. Data retrieved as JSON.
 */
function gathercontent_get_command($command = '', $postfields = array(), $account_name = '', $api_key = '') {
  if ($account_name == '') {
    $account_name = variable_get('gathercontent_account_name');
  }
  if ($api_key == '') {
    $api_key = variable_get('gathercontent_api_key');
  }
  $api_url = 'https://' . $account_name . '.gathercontent.com/api/0.1/' . $command;
  $postfields = http_build_query($postfields);
  $session = curl_init();
  curl_setopt($session, CURLOPT_URL, $api_url);
  curl_setopt($session, CURLOPT_HTTPAUTH, CURLAUTH_DIGEST);
  curl_setopt($session, CURLOPT_HEADER, FALSE);
  curl_setopt($session, CURLOPT_HTTPHEADER, array('Accept: application/json', 'Content-Type: application/x-www-form-urlencoded'));
  curl_setopt($session, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($session, CURLOPT_USERPWD, $api_key . ":x");
  curl_setopt($session, CURLOPT_POST, TRUE);
  curl_setopt($session, CURLOPT_POSTFIELDS, $postfields);
  curl_setopt($session, CURLOPT_SSL_VERIFYPEER, TRUE);
  $response = curl_exec($session);
  $httpcode = curl_getinfo($session, CURLINFO_HTTP_CODE);
  curl_close($session);
  try {
    $resp = json_decode($response);
    if (isset($resp->success) && $resp->success === TRUE) {
      return $resp;
    }
    elseif (isset($resp->error)) {
      if ($resp->error == 'You have to log in.') {
        $error = 'login_error';
      }
      return gathercontent_error_return($resp->error);
    }
    else {
      return gathercontent_error_return('login_error');
    }
  }
  catch (Exception $e) {
    return gathercontent_error_return('There was a problem contacting the API. Please check your server allows it.');
  }
  return FALSE;
}

/**
 * GatherContent API error handling.
 */
function gathercontent_error_return($msg) {
  if ($msg == 'login_error') {
    $msg = sprintf(t('There was a problem contacting the API. Please check your API credentials.'));
  }
  $cls = new stdClass();
  $cls->is_error = TRUE;
  $cls->error = t($msg);
  return $cls;
}

/**
 * Class to create Drupal nodes from GatherContent pages. Very simple for now.
 */
class GatherContentPages {

  /**
   * Fetch pages from GatherContent, and create nodes. 
   */
  function createNodes($page_ids) {
    foreach ($page_ids as $id) {
      $gc_page_id = substr($id, 11);
      // Get the page from GatherContent.
      $gc_page = gathercontent_get_command('get_page', array('id' => $gc_page_id));

      // Get the actual page.
      // @GC: Why is this an array inside an object, and not just an array?
      $gc_page = $gc_page->page[0];
      $body_content = '';
      // Get all the content fields.
      foreach ($gc_page->custom_field_values as $field_name => $field_value) {
        $body_content .= $field_value;
      }

      // Prepare creation date.
      $created = strtotime($gc_page->created_at);

      $node = new stdClass();

      // Create the node.
      // @TODO: Move this to a batch operation?
      $node->title = $gc_page->name;
      $node->type = 'page';
      $node->language = LANGUAGE_NONE;
      $node->body[$node->language][] = array('value' => $body_content, 'format' => 'full_html');
      node_object_prepare($node);
      if ($node = node_submit($node)) {
        $node->created = $created;
        node_save($node);
        drupal_set_message(t('%node_title created successfully.', array('%node_title' => check_plain($node->title))));
      }
      else {
        drupal_set_message(t('Something went wrong while creating %node_title:', array('%node_title' => check_plain($node->title) . ' ')), 'error');
      }
    }
  }

  /**
   * Get pages from GatherContent.
   */
  function getPages($page_type) {
    $pages = gathercontent_get_command('get_pages_by_project', array('id' => variable_get('gathercontent_project')));
    $original = array();
    $new_pages = array();
    $parent_array = array();
    
    foreach ($pages->pages as $page) {
      if ($page->state != 'meta' && !($page_type == 'approved' && $page->state != 'signedoff')) {
        $original[$page->id] = $page;
        $parent_id = $page->parent_id;
        if ($page->repeatable_page_id > 0) {
          $parent_id = $page->repeatable_page_id;
          if (isset($original[$parent_id])) {
            $page->custom_field_config = $original[$parent_id]->custom_field_config;
          }
        }
        if (!isset($parent_array[$parent_id])) {
          $parent_array[$parent_id] = array();
        }
        $parent_array[$parent_id][$page->id] = $page;
      }
    }
    foreach ($parent_array as $parent_id => $page_array) {
      $array = $page_array;
      uasort($array, array(&$this, 'sortPages'));
      $parent_array[$parent_id] = $array;
    }
    if (isset($parent_array[0])) {
      foreach ($parent_array[0] as $id => $page) {
        $new_pages[$id] = $page;
        $new_pages[$id]->children = $this->sortRecursive($parent_array, $id);
      }
    }
    $this->pages = $new_pages;
    $this->original_array = $original;
    return $this->pages;
  }

  /**
   * Sort page children recursively.
   */
  function sortRecursive($pages, $current=0) {
    $children = array();
    if (isset($pages[$current])) {
      $children = $pages[$current];
      foreach ($children as $id => $page) {
        $children[$id]->children = $this->sortRecursive($pages, $id);
      }
    }
    return $children;
  }

  /**
   * Sort pages.
   */
  function sortPages($a, $b) {
    if ($a->position == $b->position) {
      if ($a->id == $b->id) {
        return 0;
      }
      else {
        return ($a->id < $b->id) ? -1 : 1;
      }
    }
    return ($a->position < $b->position) ? -1 : 1;
  }

  /**
   * Generate tableselect form.
   */
  function pageImportForm($pages) {
    $index = 0;
    $options = array();

    return $this->generateOptions($pages, $options, $index);
  }

  // @TODO: Make this function recursive, so it actually imports ALL child
  // pages, without having to repeat ourselves.
  /**
   * Generate table rows.
   */
  function generateOptions($pages, $options, $index) {
    foreach ($pages as $id => $page) {
      $index = 0;
      $parent_id = $page->parent_id;
      $field_config = $page->custom_field_config;
      if ($page->repeatable_page_id > 0) {
        $parent_id = $page->repeatable_page_id;
      }
      $options['gc_page_id_' . $id] = array(
        'title' => array(
          'data' => array(
            '#markup' => theme('indentation', array('size' => $index)) . $page->name,
            '#title' => $page->name,
          ),
        ),
        // @TODO: Major todo: figure out if there's a way to use form elements
        // in a tableselect form.
        // It's possible to display them, but seems impossible to actually use
        // the form data.
        // 'page_name' => array(
        //   'data' => array(
        //     '#type' => 'textfield',
        //     '#value' => $page->name,
        //   ),
        // ),
        // 'overwrite_id' => array(
        //   'data' => array(
        //     '#type' => 'select',
        //     '#options' => array(),
        //     '#default_value' => array(),
        //   ),
        // ),
        // 'main_content' => array(
        //   'data' => array(
        //     '#type' => 'select',
        //     '#options' => array(),
        //   ),
        // ),
      );
      // If the page has children, add them to the form as well.
      if (isset($page->children) && count($page->children) > 0) {
        foreach ($page->children as $id => $page) {
          $index = 1;
          $parent_id = $page->parent_id;
          $field_config = $page->custom_field_config;
          if ($page->repeatable_page_id > 0) {
            $parent_id = $page->repeatable_page_id;
          }

          $options['gc_page_id_' . $id] = array(
            'title' => array(
              'data' => array(
                '#markup' => theme('indentation', array('size' => $index)) . $page->name,
                '#title' => $page->name,
              ),
            ),
          );
        }
      }
    }
    return $options;
  }
}

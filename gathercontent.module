<?php

/**
 * @file
 * Main module file for GatherContent module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\gathercontent\Entity\MappingInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\gathercontent\MigrateExecutable;
use Drupal\gathercontent\MigrateMessageCapture;

/**
 * Implements hook_entity_base_field_info().
 *
 * Add a 'GC mapping ID' and 'GC ID fields' base field to all node types.
 *
 * {@inheritdoc}
 */
function gathercontent_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'node') {
    $fields['gc_mapping_id'] = $storage_definition = BaseFieldDefinition::create('integer')
      ->setLabel(t('GC mapping ID'))
      ->setDescription(t('The ID of GatherContent mapping.'))
      ->setReadOnly(TRUE);
    $fields['gc_id'] = $storage_definition = BaseFieldDefinition::create('integer')
      ->setLabel(t('GC ID'))
      ->setDescription(t('The ID of GatherContent content.'))
      ->setReadOnly(TRUE);
  }
  if ($entity_type->id() === 'file') {
    $fields['gc_id'] = $storage_definition = BaseFieldDefinition::create('integer')
      ->setLabel(t('GC ID'))
      ->setDescription(t('The ID of GatherContent content.'))
      ->setReadOnly(TRUE);
  }

  return $fields;
}

/**
 * Batch operation callback for importing items.
 */
function gathercontent_import_process($gc_ids, array $import_options, MappingInterface $mapping, &$context = []) {
  $migrationIds = $mapping->getMigrations();

  if (!isset($context['results']['success'])) {
    $context['results']['success'] = 0;
  }

  if (!isset($context['results']['failed'])) {
    $context['results']['failed'] = 0;
  }

  if (!empty($migrationIds)) {
    foreach ($migrationIds as $migrationId) {
      $definition = \Drupal::service('plugin.manager.migration')
        ->getDefinition($migrationId);

      /** @var \Drupal\migrate\Plugin\Migration $migration */
      $migration = \Drupal::service('plugin.manager.migration')
        ->createInstance($migrationId, $definition);

      if ($migration) {
        $messages = new MigrateMessageCapture();
        $executable = new MigrateExecutable($migration, $messages, [
          'idlist' => implode(',', $gc_ids),
          'import_options' => $import_options,
        ]);
        $status = '';

        try {
          $status = $executable->import();
          $context['results']['success'] += $executable->getCreatedCount() + $executable->getUpdatedCount();
          $context['results']['failed'] += $executable->getFailedCount() + $executable->getIgnoredCount();

          if ($executable->getFailedCount() + $executable->getIgnoredCount() > 0) {
            $executable->rollback();
          }
        }
        catch (\Exception $e) {
          \Drupal::logger('gathercontent')->error($e->getMessage());
        }

        switch ($status) {
          case MigrationInterface::RESULT_FAILED:
            if ($migration->getStatus() !== MigrationInterface::STATUS_IDLE) {
              $migration->setStatus(MigrationInterface::STATUS_IDLE);
            }

            // Add and log any captured messages.
            foreach ($messages->getMessages() as $message) {
              $context['results']['messages'][] = (string) $message;
              \Drupal::logger('gathercontent')->error($message);
            }
            break;
        }
      }
    }
  }
}

/**
 * Finished callback.
 *
 * {@inheritdoc}
 */
function gathercontent_import_finished($success, $results, $operations) {
  if ($success) {
    if ($results['success'] > 0) {
      drupal_set_message(\Drupal::translation()
        ->formatPlural($results['success'], '1 item was imported successfully.', '@count items were imported successfully.'));
    }

    if ($results['failed'] > 0) {
      drupal_set_message(\Drupal::translation()
        ->formatPlural($results['failed'], '1 item was not imported. Check errors below.', '@count items were not imported. Check errors below.'), 'error');
    }

    if ($results['failed'] == 0 && $results['success'] == 0) {
      drupal_set_message(\Drupal::translation()
        ->translate('Nothing was imported or updated.'));
    }

    if (isset($results['messages']) && count($results['messages']) > 0) {
      foreach ($results['messages'] as $message) {
        drupal_set_message($message, 'error');
      }
    }
  }
  else {
    $error_operation = reset($operations);

    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      ),
      'error'
    );
  }

  return TRUE;
}

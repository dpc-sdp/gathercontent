<?php

/**
 * @file
 * Main module file for GatherContent module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\gathercontent\Entity\OperationItem;
use Drupal\gathercontent\Event\GatherContentEvents;
use Drupal\gathercontent\Event\PostImportEvent;
use Drupal\gathercontent\Import\ImportOptions;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_entity_base_field_info().
 *
 * Add a 'GC mapping ID' and 'GC ID fields' base field to all node types.
 *
 * {@inheritdoc}
 */
function gathercontent_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'node') {
    $fields['gc_mapping_id'] = $storage_definition = BaseFieldDefinition::create('integer')
      ->setLabel(t('GC mapping ID'))
      ->setDescription(t('The ID of GatherContent mapping.'))
      ->setReadOnly(TRUE);
    $fields['gc_id'] = $storage_definition = BaseFieldDefinition::create('integer')
      ->setLabel(t('GC ID'))
      ->setDescription(t('The ID of GatherContent content.'))
      ->setReadOnly(TRUE);
  }
  if ($entity_type->id() === 'file') {
    $fields['gc_id'] = $storage_definition = BaseFieldDefinition::create('integer')
      ->setLabel(t('GC ID'))
      ->setDescription(t('The ID of GatherContent content.'))
      ->setReadOnly(TRUE);
  }

  return $fields;
}

/**
 * Create menu link if requested.
 *
 * @param int $nid
 *   ID of \Drupal\node\NodeInterface object.
 * @param string $title
 *   Title for menu link.
 * @param string $plid
 *   Parent menu link ID, null if we don't want to create menu link.
 * @param null|string $lang
 *   Langcode for menu link.
 * @param null|int $original_link_id
 *   ID of menu link item in default language.
 */
function gc_create_menu_link($nid, $title, $plid, $lang = NULL, &$original_link_id = NULL) {
  $weight = 1;
  if (!empty($plid)) {
    if (is_null($lang)) {
      // Single language node.
      list($menu_name, $mlid) = explode(':', $plid);
      // Get parent menu link ID.
      if ($menu_name === 'node') {
        _gc_get_menu_by_gc_id($mlid, $menu_name);
      }
      $link = [
        'link' => ['uri' => 'entity:node/' . $nid],
        'title' => $title,
        'menu_name' => $menu_name,
        'parent' => $mlid,
      ];
      MenuLinkContent::create($link)->set('weight', $weight)->save();
    }
    elseif (\Drupal::moduleHandler()->moduleExists('content_translation')
      && \Drupal::service('content_translation.manager')
        ->isEnabled('menu_link_content')
    ) {
      if (!is_null($lang) && is_null($original_link_id)) {
        // Multi language node - first language.
        list($menu_name, $mlid) = explode(':', $plid);
        // Get parent menu link ID.
        if ($menu_name === 'node') {
          _gc_get_menu_by_gc_id($mlid, $menu_name, $lang);
        }
        $link = [
          'link' => ['uri' => 'entity:node/' . $nid],
          'title' => $title,
          'menu_name' => $menu_name,
          'parent' => $mlid,
          'langcode' => $lang,
        ];
        $menu_link = MenuLinkContent::create($link);
        $menu_link->set('weight', $weight);
        $menu_link->save();

        $original_link_id = $menu_link->id();
      }
      elseif (!is_null($lang) && !is_null($original_link_id)) {
        // Multi language node - other language.
        list($menu_name, $mlid) = explode(':', $plid);
        if ($menu_name === 'node') {
          _gc_get_menu_by_gc_id($mlid, $menu_name, $lang);
        }
        $link = [
          'link' => ['uri' => 'entity:node/' . $nid],
          'title' => $title,
          'menu_name' => $menu_name,
          'parent' => $mlid,
          'langcode' => $lang,
        ];

        // Load parent item.
        $original_item = MenuLinkContent::load($original_link_id);
        $original_item->addTranslation($lang, $link);
        $original_item->save();
      }
    }
  }
}

/**
 * Load menu name and menu link id for other languages by node ID.
 *
 * @param int $mlid
 *   Menu link ID.
 * @param string $menu_name
 *   Name of the menu.
 * @param string|null $language
 *   Langcode if menu link item will be translatable.
 */
function _gc_get_menu_by_gc_id(&$mlid, &$menu_name, $language = NULL) {
  // Load node by gc_id.
  $node_ids = \Drupal::entityQuery('node')
    ->condition('gc_id', $mlid)
    ->execute();
  if (!empty($node_ids)) {
    // Load menu_link by node_id.
    $node = reset($node_ids);
    $ml_result = \Drupal::entityQuery('menu_link_content')
      ->condition('link.uri', 'entity:node/' . $node);
    if (!is_null($language)) {
      $ml_result->condition('langcode', $language);
    }
    $mls = $ml_result->execute();
    if (!empty($mls)) {
      $ml = reset($mls);
      $ml_object = MenuLinkContent::load($ml);
      $menu_name = $ml_object->getMenuName();
      $mlid = 'menu_link_content:' . $ml_object->uuid();
    }
  }
}

/**
 * Batch operation callback for importing items.
 */
function gathercontent_import_process(int $gc_id, ImportOptions $import_options, &$context = []) {
  /** @var \Drupal\gathercontent\Import\Importer $importer */
  $importer = \Drupal::service('gathercontent.importer');

  $client = $importer->getClient();
  /** @var \Cheppers\GatherContent\DataTypes\Item $item */
  $item = $client->itemGet($gc_id);
  /** @var \Cheppers\GatherContent\DataTypes\Template $template */
  $template = $client->templateGet($item->templateId);

  $operation_item = \Drupal::entityTypeManager()
    ->getStorage('gathercontent_operation_item')
    ->create([
      'operation_uuid' => $import_options->getOperationUuid(),
      'item_status' => $item->status->name,
      'item_status_color' => $item->status->color,
      'template_name' => $template->name,
      'item_name' => $item->name,
      'gc_id' => $gc_id,
    ]);

  try {
    $importer->import($item, $import_options);
    $operation_item->status = 'Success';
    $operation_item->save();
  }
  catch (\Exception $e) {
    $operation_item->status = $e->getMessage();
    $operation_item->save();
  }

  $context['results']['uuid'] = $import_options->getOperationUuid();
}

/**
 * Finished callback.
 *
 * {@inheritdoc}
 */
function gathercontent_import_finished($success, $results, $operations) {
  if ($success) {
    // Select all items with uuid.
    $result = \Drupal::entityQuery('gathercontent_operation_item')
      ->condition('operation_uuid', $results['uuid'])
      ->execute();
    if (!empty($result)) {
      $operation_items = OperationItem::loadMultiple($result);
      $success_counter = 0;
      $nids = ['success' => [], 'failed' => []];
      foreach ($operation_items as $operation_item) {
        /** @var \Drupal\gathercontent\Entity\OperationItem $operation_item */
        if ($operation_item->getStatus() === 'Success') {
          $success_counter++;
          $nids['success'][] = [
            'nid' => $operation_item->get('nid')->value,
            'gc_id' => $operation_item->get('gc_id')->value,
          ];
        }
        else {
          $nids['failed'][] = [
            'nid' => $operation_item->get('nid')->value,
            'gc_id' => $operation_item->get('gc_id')->value,
          ];
        }
      }
      $unsuccessful = count($result) - $success_counter;
      drupal_set_message(\Drupal::translation()
        ->formatPlural($success_counter, '1 item was imported successfully.', '@count items were imported successfully.'));
      if ($unsuccessful > 0) {
        drupal_set_message(\Drupal::translation()
          ->formatPlural($unsuccessful, '1 item was not imported. Check errors below.', '@count items were not imported. Check errors below.'), 'error');
      }
      \Drupal::service('event_dispatcher')
        ->dispatch(GatherContentEvents::POST_IMPORT, new PostImportEvent($nids['success'], $nids['failed'], $results['uuid']));
    }
    return new RedirectResponse('admin/config/gathercontent/import/result/' . $results['uuid']);
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      ),
      'error'
    );
  }
  return TRUE;
}

/**
 * Finished callback.
 *
 * @inheritdoc
 */
function gathercontent_update_finished($success, $results, $operations) {
  if ($success) {
    // Select all items with uuid.
    $result = \Drupal::entityQuery('gathercontent_operation_item')
      ->condition('operation_uuid', $results['uuid'])
      ->execute();
    if (!empty($result)) {
      $operation_items = OperationItem::loadMultiple($result);
      $success_counter = 0;
      $nids = ['success' => [], 'failed' => []];
      foreach ($operation_items as $operation_item) {
        /** @var \Drupal\gathercontent\Entity\OperationItem $operation_item */
        if ($operation_item->getStatus() === 'Success') {
          $success_counter++;
          $nids['success'][] = [
            'nid' => $operation_item->get('nid')->value,
            'gc_id' => $operation_item->get('gc_id')->value,
          ];
        }
        else {
          $nids['failed'][] = [
            'nid' => $operation_item->get('nid')->value,
            'gc_id' => $operation_item->get('gc_id')->value,
          ];
        }
      }
      $unsuccessful = count($result) - $success_counter;
      drupal_set_message(\Drupal::translation()
        ->formatPlural($success_counter, '1 item was imported successfully.', '@count items were imported successfully.'));
      if ($unsuccessful > 0) {
        drupal_set_message(\Drupal::translation()
          ->formatPlural($unsuccessful, '1 item was not imported. Check errors below.', '@count items were not imported. Check errors below.'), 'error');
      }

      \Drupal::service('event_dispatcher')
        ->dispatch(GatherContentEvents::POST_IMPORT, new PostImportEvent($nids['success'], $nids['failed'], $results['uuid']));
    }
    return new RedirectResponse('admin/config/gathercontent/update/result/' . $results['uuid']);
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      ),
      'error'
    );
  }
  return TRUE;
}

/**
 * Check if content type has any metatag fields.
 *
 * @param string $content_type
 *   Machine name of content type.
 *
 * @return bool
 *   TRUE if metatag field exists.
 */
function check_metatag($content_type) {
  $instances = \Drupal::service('entity_field.manager')
    ->getFieldDefinitions('node', $content_type);
  foreach ($instances as $name => $instance) {
    /** @var \Drupal\Core\Field\FieldDefinitionInterface $instance */
    if ($instance->getType() === 'metatag') {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Get list of metatag fields.
 *
 * @param string $content_type
 *   Machine name of content type.
 *
 * @return array
 *   Array of metatag fields.
 */
function get_metatag_fields($content_type) {
  $instances = \Drupal::service('entity_field.manager')
    ->getFieldDefinitions('node', $content_type);
  $fields = [];
  foreach ($instances as $name => $instance) {
    /** @var \Drupal\Core\Field\FieldDefinitionInterface $instance */
    if ($instance->getType() === 'metatag') {
      $fields[] = $instance->getName();
    }
  }
  return $fields;
}
